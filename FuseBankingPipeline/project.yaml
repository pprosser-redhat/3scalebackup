apiVersion: v1
kind: Template
metadata:
  creationTimestamp: null
  name: project.yaml
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      pipeline.alpha.openshift.io/uses: '[{"name": "ab-pipeline",  "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      app: pipeline-ab
      name: ab-pipeline
      template: pipeline-ab
    name: ab-pipeline
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: "pipeline {\n    agent none\n        stages {\n            stage('moveToProd'){\n
          \               steps {\n                    script{\n                        openshift.withCluster()
          {\n                            //openshift.verbose()\n                            openshift.withProject('fisdemoprod')
          {\n                                \n                                \n
          \                               // Make UAT version of the image available
          for AB testing\n                                openshift.tag(\"fisdemo/fisgateway-service:uatready\",
          \"fisdemoprod/fisgateway-service-new:latest\")\n                                \n
          \                               // Rollout lastest version\n                               //
          openshift.selector(\"dc\", \"fisgateway-service-new\").rollout().latest()\n
          \                               \n                                // Scale
          temp new version ready for AB testing\n                                openshift.selector(\"dc\",
          \"fisgateway-service-new\").scale(\"--replicas=1\")\n                                \n
          \                               //Wait for pod  to become ready\n                                openshift.selector(\"dc\",
          \"fisgateway-service-new\").related('pods').untilEach(1) {\n                                  return
          (it.object().status.phase == \"Running\")\n                                }\n
          \                               \n                              // openshift.verbose(false)\n
          \                           }\n                        }\n                    }\n
          \               }\n            }\n            stage('createABRoute') {\n
          \               steps {\n                    script {\n                        def
          abroute = [\n                        \"apiVersion\": \"v1\",\n                        \"kind\":
          \"Route\",\n                        \"metadata\": [\n                            \"labels\":
          [\n                                'component': 'fisgateway-service-stable',\n
          \                               'group': 'quickstarts',\n                                'project':
          'fisgateway-service-stable',\n                                'provider':
          's2i',\n                                'template': 'fisgateway-service',\n
          \                               'version': '1.0.0'\n                            ],\n
          \                           \"name\": \"fisgateway-service\",\n                            \"namespace\":
          \"fisdemoprod\",\n                            \"annotations\" : [\n                                'haproxy.router.openshift.io/balance':
          'roundrobin'\n                                ],\n                            ],\n
          \                       \"spec\": [\n                            \"alternateBackends\":
          [[\n                                \"kind\": \"Service\",\n                                \"name\":
          \"fisgateway-service-new\",\n                                \"weight\":
          30\n                            ]],\n                            \"host\":
          \"fisgateway-service-fisdemoprod.${DOMAIN_NAME_SUFFIX}\",\n                            \"to\":
          [\n                                \"kind\": \"Service\",\n                                \"name\":
          \"fisgateway-service-stable\",\n                                \"weight\":
          70\n                            ],\n                        ]\n                    ]\n
          \                   \n                    openshift.withCluster() {\n                        openshift.withProject('fisdemoprod')
          {\n                            \n                            echo \"Deleting
          existing route\"\n                            \n                            openshift.selector(\"route\",
          \"fisgateway-service\").delete()\n                            \n                            echo
          \"Creating Route\"\n                            def objs = openshift.create(abroute)\n
          \                       }\n                        \n                    }\n
          \               }\n            }\n            // To do, update 3Scale using
          the 3Scale API\n        }\n    }\n}\n\n/*\n  stage('moveToProd'){\n    echo
          \"UAT at ${env.uatnamespace} and PROD at ${env.prodnamespace}\"\n    openshiftTag
          alias: \"false\",  destStream: \"fisgateway-service\", destTag: \"latest\",
          destinationNamespace: \"${env.prodnamespace}\", namespace: \"${env.uatnamespace}\",
          srcStream: \"fisgateway-service-uat\", srcTag: \"uatready\", verbose: \"true\"\n
          \ }\n  \n  stage('StartNewServices') {\n    print 'Start new service with
          one pod running' \n    openshiftScale depCfg: \"fisgateway-service-new\",
          namespace: \"${env.prodnamespace}\", replicaCount: \"1\", verifyReplicaCount:
          \"true\", verbose: \"true\"\n  }\n  \n  stage('UpdateRouteToAB') { \n    print
          'deleteroute' \n    openshiftDeleteResourceByKey keys: \"fisgateway-service\",
          namespace: \"${env.prodnamespace}\", types: \"route\", verbose: \"true\"\n
          \   \n    print 'Update Route to only point to both new and stable service'
          \n    openshiftCreateResource jsonyaml: \"{    'apiVersion': 'v1',    'kind':
          'Route',    'metadata': {        'labels': {            'component': 'fisgateway-service-stable',
          \           'group': 'quickstarts',            'project': 'fisgateway-service-stable',
          \           'provider': 's2i',            'template': 'fisgateway-service',
          \           'version': '1.0.0'        },        'name': 'fisgateway-service',
          \       'namespace': '${env.prodnamespace}'    },    'spec': {        'alternateBackends':
          [            {                'kind': 'Service',                'name':
          'fisgateway-service-new',                'weight': 30            }        ],
          \       'host': 'fisgateway-service-temp.apps.mkt2go.com',        'to':
          {            'kind': 'Service',            'name': 'fisgateway-service-stable',
          \           'weight': 70        },        'wildcardPolicy': 'None'    }}\",
          namespace: \"temp\", verbose: \"false\"\n  }\n  \n  stage('GetCurrentLimitId')
          { \n    print 'Get Current Limit Id'\n    env.LIMIT_ID = sh (\n      script:
          \"curl --silent -X GET \\\"${env.threescaleurl}/admin/api/application_plans/${env.appplanid}/metrics/${env.metricsid}/limits.xml?access_token=${env.apiaccesstoken}\\\"
          --stderr - | sed -e 's,.*<id>\\\\([^<]*\\\\)</id>.*,\\\\1,g' \", \n      returnStdout:
          true\n    ).trim()\n    echo env.LIMIT_ID\n  }\n  \n  stage('UpdateLimitToAB')
          { \n    print 'Update 3scale Limit back to AB Testing mode'  \n    sh  \"echo
          Updating Id ${env.LIMIT_ID} to less request ${env.ablimit} per min because
          of AB Testing\"\n    sh  \"curl -s -o /dev/null -w \\\"%{http_code}\\\\n\\\"
          -X PUT  \\\"${env.threescaleurl}/admin/api/application_plans/${env.appplanid}/metrics/${env.metricsid}/limits/${env.LIMIT_ID}.xml\\\"
          -d \\'access_token=${env.apiaccesstoken}&period=minute&value=${env.ablimit}\\'\"
          \ \n  }\n}\n*/\n\n\n"
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      pipeline.alpha.openshift.io/uses: '[{"name": "allprod-pipeline",  "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      app: pipeline-allprod
      name: allprod-pipeline
      template: pipeline-allprod
    name: allprod-pipeline
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: "pipeline {\n    agent none\n    stages {\n        stage ('moveNewToStable')
          {\n            steps {\n                script {\n                    openshift.withCluster()
          {\n                        openshift.withProject('fisdemoprod') {\n                            \n
          \                           openshift.tag(\"fisdemoprod/fisgateway-service-new:latest\",
          \"fisdemoprod/fisgateway-service-stable:latest\")\n                            \n
          \                           def deploymentConfig = openshift.selector(\"dc\",
          \"fisgateway-service-stable\")\n                            \n                            def
          rm = deploymentConfig.rollout()\n                            \n                            //Rollout
          latest deployment\n                            rm.latest()\n                            \n
          \                           //Check Rollout status - blocks and waits for
          rollout to complete\n                            rm.status()\n                        }\n
          \                   }\n                }\n            }\n        }\n        \n
          \       stage ('UpdateRouteToStable') {\n            steps {\n                script
          {\n                    def stableroute = [\n                        \"apiVersion\":
          \"v1\",\n                        \"kind\": \"Route\",\n                        \"metadata\":
          [\n                            \"labels\": [\n                                'component':
          'fisgateway-service-stable',\n                                'group': 'quickstarts',\n
          \                               'project': 'fisgateway-service-stable',\n
          \                               'provider': 's2i',\n                                'template':
          'fisgateway-service',\n                                'version': '1.0.0'\n
          \                           ],\n                            \"name\": \"fisgateway-service\",\n
          \                           \"namespace\": \"fisdemoprod\",\n                            \"annotations\"
          : [\n                                'haproxy.router.openshift.io/balance':
          'roundrobin'\n                                ],\n                            ],\n
          \                       \"spec\": [\n                            \"host\":
          \"fisgateway-service-fisdemoprod.${DOMAIN_NAME_SUFFIX}\",\n                            \"to\":
          [\n                                \"kind\": \"Service\",\n                                \"name\":
          \"fisgateway-service-stable\",\n                            ],\n                        ]\n
          \                   ]\n                    openshift.withCluster() {\n                        openshift.withProject('fisdemoprod')
          {\n                                \n                            echo \"Deleting
          existing route\"\n                            \n                            openshift.selector(\"route\",
          \"fisgateway-service\").delete()\n                            \n                            echo
          \"Creating Route\"\n                            def objs = openshift.create(stableroute)\n
          \                               \n                            \n                        }
          \  \n                    }\n                }\n            }\n        }\n
          \       stage ('StopNewServices') {\n            steps {\n                script
          {\n                    openshift.withCluster() {\n                        openshift.withProject('fisdemoprod')
          {\n                            \n                            // stop the
          new deployment pods until next time!\n                            openshift.selector(\"dc\",
          \"fisgateway-service-new\").scale(\"--replicas=0\")\n                                \n
          \                           \n                        }   \n                    }\n
          \               }\n            }\n        } \n    }\n}\n\n/*node('maven')
          { \n  env.threescaleurl = \"https://fusedemo-admin.3scale.net\";\n  env.apiaccesstoken
          = \"143d1a90ea5d369a88ec35310f06b86fec8569a1c34c21eaffc9f9906947962a\";
          \   \n  env.appplanid = \"2357355899471\";\n  env.metricsid = \"2555418019263\";\n
          \ env.normallimit = 50;\n  \n  env.newnamespace = \"fisdemoprod\";\n  env.stablenamespace
          = \"fisdemoprod\";\n  \n  stage('moveNewToStable') { \n    print 'Move new
          image stream to stable image stream' \n    openshiftTag(namespace: \"${env.newnamespace}\",
          sourceStream: \"fisgateway-service\",  sourceTag: \"latest\", destinationnamespace:
          \"${env.stablenamespace}\", destinationStream: \"fisgateway-service-stable\",
          destinationTag: \"latest\")\n  }\n  \n  stage('UpdateRouteToStable') {\n
          \   print 'deleteroute' \n    openshiftDeleteResourceByKey keys: \"fisgateway-service\",
          namespace: \"${env.stablenamespace}\", types: \"route\", verbose: \"true\"\n
          \   \n    print 'Update Route to only point to stable service' \n    openshiftCreateResource
          jsonyaml: \"{    'apiVersion': 'v1',    'kind': 'Route',    'metadata':
          {        'labels': {            'component': 'fisgateway-service-stable',
          \           'group': 'quickstarts',            'project': 'fisgateway-service-stable',
          \           'provider': 's2i',            'template': 'fisgateway-service',
          \           'version': '1.0.0'        },        'name': 'fisgateway-service',
          \       'namespace': '${env.stablenamespace}'    },    'spec': {        'host':
          'fisgateway-service-${env.stablenamespace}.192.168.64.2.nip.io',        'to':
          {            'kind': 'Service',            'name': 'fisgateway-service-stable',
          \           'weight': 100        },        'wildcardPolicy': 'None'    }}\",
          namespace: \"${env.stablenamespace}\", verbose: \"false\"\n  } \n  \n  stage('StopNewServices')
          {\n    print 'Stop all new service pod' \n    openshiftScale depCfg: \"fisgateway-service-new\",
          namespace: \"${env.newnamespace}\", replicaCount: \"0\", verifyReplicaCount:
          \"true\", verbose: \"true\"\n  }\n  \n  stage('GetCurrentLimitId') { \n
          \   print 'Get Current Limit Id'\n    env.LIMIT_ID = sh (\n      script:
          \"curl --silent -X GET \\\"${env.threescaleurl}/admin/api/application_plans/${env.appplanid}/metrics/${env.metricsid}/limits.xml?access_token=${env.apiaccesstoken}\\\"
          --stderr - | sed -e 's,.*<id>\\\\([^<]*\\\\)</id>.*,\\\\1,g' \", \n      returnStdout:
          true\n    ).trim()\n    echo env.LIMIT_ID\n  }\n  \n  stage('UpdateLimitToAllProd')
          { \n    print 'Update 3scale Limit back to normal'\n    sh  \"echo Updating
          Id ${env.LIMIT_ID} to less request ${env.normallimit} per min because of
          AB Testing\"\n    sh  \"curl -s -o /dev/null -w \\\"%{http_code}\\\\n\\\"
          -X PUT  \\\"${env.threescaleurl}/admin/api/application_plans/${env.appplanid}/metrics/${env.metricsid}/limits/${env.LIMIT_ID}.xml\\\"
          -d \\'access_token=${env.apiaccesstoken}&period=minute&value=${env.normallimit}\\'\"
          \ \n  }\n} */"
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      pipeline.alpha.openshift.io/uses: '[{"name": "play-area", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      app: play-area
      name: play-area
      template: play-area
    name: play-area
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: "pipeline {\n    agent none\n    stages {\n        stage ('build')
          {\n            steps {\n                script {\n                    openshift.withCluster()
          {\n                        openshift.withProject('fisdemo') {\n                            \n
          \                         def targetDeployConfig = openshift.selector( \"dc\",
          \"fisdemo/fisgateway-service\")\n                          \n                          def
          targetDeploy= targetDeployConfig.related('deployment')\n                          \n
          \                         targetDeployConfig.describe()\n                          targetDeploy.describe()\n
          \                         echo \"Current replicas = \"\n                          \n
          \                       }\n                    }\n                }\n            }\n
          \       }\n    }\n}\n\n\n\n\n//openshiftBuild(namespace: \"fisdemo\", buildConfig:
          \"fisgateway-service\", showBuildLogs: \"true\")\n            \n    \n/*node('maven')
          { \n  stage('build') { \n    print 'build'\n     openshiftBuild(namespace:
          \"fisdemo\", buildConfig: \"fisgateway-service\", showBuildLogs: \"true\")\n
          \ }           \n  stage('staging') {\n    print 'stage' \n    openshiftDeploy(namespace:
          \"fisdemo\", deploymentConfig: \"fisgateway-service\")\n  } \n  stage ('promotionCheck')
          { \n      def userInput = input( id: \"userInput\", message: \"Promote to
          UAT?\", parameters: [ [$class: \"TextParameterDefinition\", defaultValue:
          \"Comments?\", description: \"comments\", name: \"comments\"] ])  \n      print
          'promotionCheck' \n  \t\topenshiftTag(namespace: \"fisdemo\", sourceStream:
          \"fisgateway-service\",  sourceTag: \"latest\", destinationNamespace: \"fisdemo\",
          destinationStream: \"fisgateway-service\", destinationTag: \"uatready\")
          \  \n  } \n  \n  stage('UAT') { \n    print 'UAT'\n    openshiftDeploy(namespace:
          \"fisdemo\", deploymentConfig: \"fisgateway-service-uat\")\n\t}  \n} */"
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
  status:
    lastVersion: 0
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      pipeline.alpha.openshift.io/uses: '[{"name": "uat-pipeline", "kind": "DeploymentConfig"}]'
    creationTimestamp: null
    labels:
      app: pipeline-uat
      name: uat-pipeline
      template: pipeline-uat
    name: uat-pipeline
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output: {}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: "pipeline {\n    agent none\n    stages {\n        stage ('build')
          {\n            steps {\n                script {\n                    openshift.withCluster()
          {\n                        openshift.verbose()\n                        openshift.withProject('fisdemo')
          {\n                            \n                           // def build
          = openshift.startBuild(\"fisgateway-service\", \"--wait\")\n                           \n
          \                              \n                            //def targetBuildConfig
          = openshift.selector( \"bc\", \"fisgateway-service\" )\n                            def
          targetBuild = openshift.startBuild(\"fisgateway-service\")\n              \n
          \                           echo 'Waiting for build to be created...'\n
          \                           targetBuild.watch\n                            {\n
          \                               return it.count() > 0\n                            }\n
          \                           echo 'Build created..'\n              \n                            targetBuild.watch\n
          \                           {\n                                if( it.count()
          == 0 ) \n                                {\n                                    echo
          \"No builds are currently active...\"\n                                    return
          false\n                                }\n                \n                                def
          buildComplete = true\n                \n                                it.withEach\n
          \                               {\n                                    def
          individualBuild = it.object()\n                                    if( it.object().status.phase
          != \"Complete\" ) buildComplete = false\n                                }\n
          \               \n                                return buildComplete\n
          \                           } \n              \n                            echo
          \"Build completed...\"\n                            \n                        }\n
          \                   }\n                }\n            }\n        }\n        \n
          \       stage ('deploying the new build') {\n            steps {\n                script
          {\n                    openshift.withCluster() {\n                        openshift.withProject('fisdemo')
          {\n                                \n                            def deploymentConfig
          = openshift.selector(\"dc\", \"fisgateway-service\")\n                            \n
          \                           def rm = deploymentConfig.rollout()\n                            \n
          \                           //Rollout latest deployment\n                            rm.latest()\n
          \                           \n                            //Check Rollout
          status - blocks and waits for rollout to complete\n                            rm.status()\n
          \                           \n                        }   \n                    }\n
          \               }\n            }\n        }\n        stage ('promotionCheck')
          {\n            steps {\n                script {\n                    openshift.withCluster()
          {\n                        openshift.withProject('fisdemo') {\n                                \n
          \                           input \"Promote to UAT?\"\n                            \n
          \                           openshift.tag(\"fisdemo/fisgateway-service:latest\",
          \"fisdemo/fisgateway-service:uatready\")\n                                \n
          \                           \n                        }   \n                    }\n
          \               }\n            }\n        }\n        stage ('nowDeployingToUAT')
          {\n            steps {\n                script {\n                    openshift.withCluster()
          {\n                        openshift.withProject('fisdemo') {\n                                \n
          \                          \n                                \n                            \n
          \                       }   \n                    }\n                }\n
          \           }\n        } \n    }\n}\n\n\n\n\n//openshiftBuild(namespace:
          \"fisdemo\", buildConfig: \"fisgateway-service\", showBuildLogs: \"true\")\n
          \           \n    \n/*node('maven') { \n  stage('build') { \n    print 'build'\n
          \    openshiftBuild(namespace: \"fisdemo\", buildConfig: \"fisgateway-service\",
          showBuildLogs: \"true\")\n  }           \n  stage('staging') {\n    print
          'stage' \n    openshiftDeploy(namespace: \"fisdemo\", deploymentConfig:
          \"fisgateway-service\")\n  } \n  stage ('promotionCheck') { \n      def
          userInput = input( id: \"userInput\", message: \"Promote to UAT?\", parameters:
          [ [$class: \"TextParameterDefinition\", defaultValue: \"Comments?\", description:
          \"comments\", name: \"comments\"] ])  \n      print 'promotionCheck' \n
          \ \t\topenshiftTag(namespace: \"fisdemo\", sourceStream: \"fisgateway-service\",
          \ sourceTag: \"latest\", destinationNamespace: \"fisdemo\", destinationStream:
          \"fisgateway-service\", destinationTag: \"uatready\")   \n  } \n  \n  stage('UAT')
          { \n    print 'UAT'\n    openshiftDeploy(namespace: \"fisdemo\", deploymentConfig:
          \"fisgateway-service-uat\")\n\t}  \n} */"
      type: JenkinsPipeline
    successfulBuildsHistoryLimit: 5
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
parameters:
  - description: Domain name suffix - added to all routes
    displayName: Domain Name Suffix
    name: DOMAIN_NAME_SUFFIX
    value: ${DOMAIN_NAME_SUFFIX}
