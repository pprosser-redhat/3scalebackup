---
# Documentation:
# This playbook is used to deploy 3Scale, and a restful service
#
- name:               Create 3Scale AMP and deploy members api
  hosts:              localhost
  connection:         local
  gather_facts: no

  vars_prompt:
    - name:           ocp_username
      prompt:         "Please provide Openshift Login username"
      default:        developer
      private:        no
    - name:           ocp_password
      prompt:         "Please provide your Openshift Login password"
      default:        developer
      private:        yes
    - name:           ocp_url
      prompt:         "Please provide your Openshift URL"
      default:        https://192.168.99.100:8443
      private:        no
    - name:           domain_name_suffix
      prompt:         "Please Enter the domain wildcard name suffix for all OCP routes"
      default:        apps.demolab.local
      private:        no
    - name:           keystore_password
      prompt:         "Please enter the default password for keystores"
      default:        redhat123
    - name:           git_repo
      prompt:         "Please Enter the Git repo to clone to get hold of artefacts"
      default:        https://github.com/pprosser-redhat/3scalebackup.git
      private:        no
    - name:           clone_destination
      prompt:         "Please Enter the local destination to store the repo"
      default:        /tmp/3scaletmp
      private:        no
    - name:           amp_token
      prompt:         "Please Enter the 3SCale token that is required for 3Scale API calls. Defaults to a valid one in the DB"
      default:        c373d6c0262d307aaae51dc7a102f53ec32d8f642f88a97687c8dfabac15d838
      private:        no
    - name:           gogs_user
      prompt:         Gogs user name that you will create at registration
      default:        pprosser
      private:        no
    - name:           secret_user
      prompt:         Service name generated at the Red Hat Portal
      private:        no
    - name:           secret_token
      prompt:         Service token generated at the Red Hat Portal
      private:        no
    - name:           registry
      prompt:         Red Hat Registry
      default:        registry.redhat.io
      private:        no     
#  vars:
#    DOMAIN_NAME_SUFFIX: apps.demolab.local
#    KEYSTORE_PASSWORD: test

  tasks:

    - name: Clone base git repo from "{{git_repo}}"
      git:
        repo: "{{git_repo}}"
        dest: "{{clone_destination}}/3Scale"
        version: master
        update: yes
        clone: yes
        force: yes
        version: 3Scale26


# Login to Openshift using oc client - I can't get the openshift_raw module to authenticate
    - name:           login to Openshift at the specified URL
      shell:          oc login {{ocp_url}} --username={{ocp_username}} --password={{ocp_password}}

# Replace 192.168.99.100.nip.io with choosen wildcard domain_name_suffix

    - name: Replace Wildcard name in AMP SQL database before Loading
      replace:
        path: '{{clone_destination}}/3Scale/3Scale_backup/db_archive_dir/all.sql'
        regexp: 192.168.99.100.nip.io
        replace: '{{domain_name_suffix}}'

#####################################################
# Create project to deploy 3Scale Management Platform
#####################################################
    - name:           Create 3Scale AMP project
      shell:          oc new-project amp --description='3Scale API Management Platform' --display-name='3Scale API Management Platform'

# Create secret to all Openshift to pull from Red Hat Registry
    - name: Create secret to pull from  Red hat registry
      shell: oc create secret docker-registry redhat-pull-secret --docker-username='{{secret_user}}' --docker-password='{{secret_token}}' --docker-server={{registry}} 

#####################################################
# Create all AMP from template
#####################################################

    - name: Create new 3Scale AMP from template
      shell: oc new-app -n amp --file /{{clone_destination}}/3Scale/amptemplates/amp.yml --param WILDCARD_DOMAIN={{domain_name_suffix}}

# Wait for 3Scale to start before continuing
    - name: Is 3Scale started?
      uri:
        validate_certs: no
        url: https://3scale-admin.{{domain_name_suffix}}/p/login
      register: test
      until: test.status == 200
      retries: 400
      delay: 5

# Capture pods names that need files injecting to recover 3SCale Correctly

    - name: Get OCP bearer token for API call
      shell: oc whoami -t
      register: ocptoken

    - name: Get mysql Pod
      uri:
        validate_certs: no
        url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=threescale_component_element=mysql"
        headers:
          Authorization: "Bearer {{ocptoken.stdout}}"
      register: mysql_pod

    - name: Capture mysql pod name
      set_fact:
        mysql_container: "{{mysql_pod|json_query('json.items[0].metadata.name')}}"

    - name: Get backend_redis pod
      uri:
        validate_certs: no
        url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=threescale_component=backend,threescale_component_element=redis"
        headers:
          Authorization: "Bearer {{ocptoken.stdout}}"
      register: backend_redis_pod

    - name: Capture backend_redis_pod pod name
      set_fact:
        backend_redis_container: "{{backend_redis_pod|json_query('json.items[0].metadata.name')}}"

    - name: Get system_redis pod
      uri:
        validate_certs: no
        url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=threescale_component=system,threescale_component_element=redis"
        headers:
          Authorization: "Bearer {{ocptoken.stdout}}"
      register: system_redis_pod

    - name: Capture backend_redis_pod pod name
      set_fact:
        system_redis_container: "{{system_redis_pod|json_query('json.items[0].metadata.name')}}"

# Copy the mysql backup file into the mysql container
    - name: "Inject mysql backup into container {{mysql_container}}"
      shell: oc rsync {{clone_destination}}/3Scale/3Scale_backup/db_archive_dir {{mysql_container}}:/opt/app-root/src -n amp

# execute
    - name: "Loading data into mysql"
      shell: oc exec {{mysql_container}} -n amp -- bash -c "mysql -u root < /opt/app-root/src/db_archive_dir/all.sql"

# load backend_redis cache

    - name: "Inject backend_redis cache backup into container appendonly.aof {{backend_redis_container}}"
      shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/backend_redis/data/appendonly.aof {{backend_redis_container}}:/var/lib/redis/data -n amp

    - name: "Inject backend_redis cache backup into container dump.rdb {{backend_redis_container}}"
      shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/backend_redis/data/dump.rdb {{backend_redis_container}}:/var/lib/redis/data -n amp

    - name: "restart backend_redis_container {{backend_redis_container}}"
      shell: oc delete pod {{backend_redis_container}} -n amp

# load system_redis cache

    - name: "Inject system_redis cache backup into container appendonly.aof {{system_redis_container}}"
      shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/system_redis/data/appendonly.aof {{system_redis_container}}:/var/lib/redis/data -n amp

    - name: "Inject system_redis cache backup into container dump.rdb {{system_redis_container}}"
      shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/system_redis/data/dump.rdb {{system_redis_container}}:/var/lib/redis/data -n amp

    - name: "restart backend_redis_container {{system_redis_container}}"
      shell: oc delete pod {{system_redis_container}} -n amp

# load backup of zync database 

    - name: Get Zync Database Pod
      uri:
        validate_certs: no
        url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=threescale_component=zync,threescale_component_element=database"
        headers:
          Authorization: "Bearer {{ocptoken.stdout}}"
      register: zync_pod

    - name: Capture zync database pod name
      set_fact:
        zync_db_container: "{{zync_pod|json_query('json.items[0].metadata.name')}}"

# Copy the zync db backup file into the zync db container container
    - name: "Inject zync backup into container {{zync_db_container}}"
      shell: oc rsync {{clone_destination}}/3Scale/3Scale_backup/backup_zync_db/data {{zync_db_container}}:/var/lib/pgsql/data/backup -n amp

# Restore the database
    - name: "Loading data into zync database"
      shell: oc exec {{zync_db_container}} -n amp -- bash -c "psql -h 127.0.0.1 -U zync -d zync_production < /var/lib/pgsql/data/backup/data/zync.sql"
      
# The db update will have updated the randomly generated password, need to put it back to that store in the copied db
    - name: "Reset 3Scale Portal Endpoint in PROD gateway"
      shell: oc set env dc/apicast-production THREESCALE_PORTAL_ENDPOINT=http://redhat12@system-master:3000/master/api/proxy/configs -n amp
# The db update will have updated the randomly generated password, need to put it back to that store in the copied db
    - name: "Reset 3Scale Portal Endpoint in Staging gateway"
      shell: oc set env dc/apicast-staging THREESCALE_PORTAL_ENDPOINT=http://redhat12@system-master:3000/master/api/proxy/configs -n amp

# Add my extra gateway api routes as I'm not using Wildcards
    - name: Create AMP application routes from cloned repo
      shell: oc new-app  --file "{{clone_destination}}/3Scale/backup_amp/project.yaml" -n amp -p DOMAIN_NAME_SUFFIX="{{domain_name_suffix}}" KEYSTORE_PASSWORD={{keystore_password}}


    # Pause to make sure that 3Scale has fully revoverd from redis caches backups being installed

    # A helpful reminder of what to look out for post-update.
    - pause:
        prompt: "Has the Redis caches fully recovered?"

######## 3Scale physical setup complete ################################################
# Now, a number of API calls to 3Scale will be made to change the wildcard domain name #
########################################################################################

# members (api-key)

    - name: update members (api-key) with new endpoints
      shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/5/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Fmembersregistrationservice-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Feap-app-membersapp.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Fmembersregistrationservice-3scale-apicast-staging.{{domain_name_suffix}}%3A443' -k

    - name: Get latest members (api-key) sandbox version to promote
      uri:
        validate_certs: no
        method: GET
        body_format: raw
        headers:
          Content-Type: "application/xml"
        url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/5/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
      register: sandbox_membersapi_result

    - name: Save the latest sandbox members (api-key) version
      set_fact:
        sandbox_membersapi_version: "{{sandbox_membersapi_result|json_query('json.proxy_config.version')}}"

# members (oauth)

    - name: update members (oauth) with new endpoints
      shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/6/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Fmembersregistrationservice-oauth-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Feap-app-membersapp.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Fmembersregistrationservice-oauth-3scale-apicast-staging.apps.{{domain_name_suffix}}%3A443&oidc_issuer_endpoint=http%3A%2F%2F3scale-admin%3A4515e009-ee60-4039-8d5a-1578ecec4349%40sso-sso.{{domain_name_suffix}}%2Fauth%2Frealms%2F3scale' -k

    - name: Get latest members (oauth) sandbox version to promote
      uri:
        validate_certs: no
        method: GET
        body_format: raw
        headers:
          Content-Type: "application/xml"
        url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/6/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
      register: sandbox_membersoauth_result

    - name: Save the latest sandbox members (oauth) version
      set_fact:
        sandbox_membersoauth_version: "{{sandbox_membersoauth_result|json_query('json.proxy_config.version')}}"

# Promote the update gateways to production

    - name: Promote members (api-key) to production gateway
      shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/5/proxy/configs/sandbox/{{sandbox_membersapi_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

    - name: Promote members (oauth) to production gateway
      shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/6/proxy/configs/sandbox/{{sandbox_membersoauth_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

# fis agile int demolab

    - name: update fis agile int demo with new endpoints
      shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/7/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Ffisdemo-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Ffisgateway-service-fisdemoprod.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Ffisdemo-3scale-apicast-staging.{{domain_name_suffix}}%3A443&oidc_issuer_endpoint=http%3A%2F%2F3scale-admin%3A4515e009-ee60-4039-8d5a-1578ecec4349%40sso-sso.{{domain_name_suffix}}%2Fauth%2Frealms%2F3scale' -k

    - name: Get latest fis (api-key) sandbox version to promote
      uri:
        validate_certs: no
        method: GET
        body_format: raw
        headers:
          Content-Type: "application/xml"
        url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/7/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
      register: sandbox_fis_result

    - name: Save the latest sandbox fis (api-key) version
      set_fact:
        sandbox_fis_version: "{{sandbox_fis_result|json_query('json.proxy_config.version')}}"

# fis agile int demolab (Oauth)

    - name: update fis agile int demo (OAuth) with new endpoints
      shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/8/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Foauth-fisdemo-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Ffisgateway-service-fisdemoprod.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Foauth-fisdemo-3scale-apicast-staging.{{domain_name_suffix}}%3A443&oidc_issuer_endpoint=http%3A%2F%2F3scale-admin%3A4515e009-ee60-4039-8d5a-1578ecec4349%40sso-sso.{{domain_name_suffix}}%2Fauth%2Frealms%2F3scale' -k

    - name: Get latest fis (OAuth) sandbox version to promote
      uri:
        validate_certs: no
        method: GET
        body_format: raw
        headers:
          Content-Type: "application/xml"
        url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/8/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
      register: sandbox_fis_oauth_result

    - name: Save the latest sandbox fis (oauth) version
      set_fact:
        sandbox_fis_oauth_version: "{{sandbox_fis_oauth_result|json_query('json.proxy_config.version')}}"

# Promote the update gateways to production

    - name: Promote fisdemo (api-key) to production gateway
      shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/7/proxy/configs/sandbox/{{sandbox_fis_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

    - name: Promote fisdemo (oauth) to production gateway
      shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/8/proxy/configs/sandbox/{{sandbox_fis_oauth_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

# Setup up demo Services
# Logout of Openshift
    - name:           logout of Openshift
      shell:          oc logout
