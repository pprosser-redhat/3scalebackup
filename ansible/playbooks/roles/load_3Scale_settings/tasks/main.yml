---
# file: main.yml
# Replace 192.168.99.100.nip.io with choosen wildcard domain_name_suffix

- name: Replace Wildcard name in AMP SQL database before Loading
  replace:
    path: '{{clone_destination}}/3Scale/3Scale_backup/db_archive_dir/all.sql'
    regexp: apps.derby-b2da.open.redhat.com
    replace: '{{domain_name_suffix}}'

# Capture pods names that need files injecting to recover 3SCale Correctly

- name: Get OCP bearer token for API call
  shell: oc whoami -t
  register: ocptoken

- name: Get mysql Pod
  uri:
    validate_certs: no
    url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=threescale_component_element=mysql"
    headers:
      Authorization: "Bearer {{ocptoken.stdout}}"
  register: mysql_pod

- name: Capture mysql pod name
  set_fact:
    mysql_container: "{{mysql_pod|json_query('json.items[0].metadata.name')}}"

# load backup of zync database 

- name: Get Zync Database Pod
  uri:
    validate_certs: no
    url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=threescale_component=zync,threescale_component_element=database"
    headers:
      Authorization: "Bearer {{ocptoken.stdout}}"
  register: zync_pod

- name: Capture zync database pod name
  set_fact:
    zync_db_container: "{{zync_pod|json_query('json.items[0].metadata.name')}}"

- name: Get backend_redis pod
  uri:
    validate_certs: no
    url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=threescale_component=backend,threescale_component_element=redis"
    headers:
      Authorization: "Bearer {{ocptoken.stdout}}"
  register: backend_redis_pod

- name: Capture backend_redis_pod pod name
  set_fact:
    backend_redis_container: "{{backend_redis_pod|json_query('json.items[0].metadata.name')}}"

- name: Get system_redis pod
  uri:
    validate_certs: no
    url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=threescale_component=system,threescale_component_element=redis"
    headers:
      Authorization: "Bearer {{ocptoken.stdout}}"
  register: system_redis_pod

- name: Capture backend_redis_pod pod name
  set_fact:
    system_redis_container: "{{system_redis_pod|json_query('json.items[0].metadata.name')}}"

# Copy the mysql backup file into the mysql container
- name: "Inject mysql backup into container {{mysql_container}}"
  shell: oc rsync {{clone_destination}}/3Scale/3Scale_backup/db_archive_dir {{mysql_container}}:/opt/app-root/src -n amp

# execute
- name: "Loading data into mysql"
  shell: oc exec {{mysql_container}} -n amp -- bash -c "mysql -u root < /opt/app-root/src/db_archive_dir/all.sql"

# load backend_redis cache

- name: "Inject backend_redis cache backup into container appendonly.aof {{backend_redis_container}}"
  shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/backend_redis/data/appendonly.aof {{backend_redis_container}}:/var/lib/redis/data -n amp

- name: "Inject backend_redis cache backup into container dump.rdb {{backend_redis_container}}"
  shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/backend_redis/data/dump.rdb {{backend_redis_container}}:/var/lib/redis/data -n amp

- name: "restart backend_redis_container {{backend_redis_container}}"
  shell: oc delete pod {{backend_redis_container}} -n amp

# load system_redis cache

- name: "Inject system_redis cache backup into container appendonly.aof {{system_redis_container}}"
  shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/system_redis/data/appendonly.aof {{system_redis_container}}:/var/lib/redis/data -n amp

- name: "Inject system_redis cache backup into container dump.rdb {{system_redis_container}}"
  shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/system_redis/data/dump.rdb {{system_redis_container}}:/var/lib/redis/data -n amp

- name: "restart backend_redis_container {{system_redis_container}}"
  shell: oc delete pod {{system_redis_container}} -n amp

# Copy the zync db backup file into the zync db container container
- name: "Inject zync backup into container {{zync_db_container}}"
  shell: oc rsync {{clone_destination}}/3Scale/3Scale_backup/backup_zync_db/data {{zync_db_container}}:/var/lib/pgsql/data/backup -n amp

# Restore the database
- name: "Loading data into zync database"
  shell: oc exec {{zync_db_container}} -n amp -- bash -c "psql -h 127.0.0.1 -U zync -d zync_production < /var/lib/pgsql/data/backup/data/zync.sql"

# The db update will have updated the randomly generated password, need to put it back to that store in the copied db
- name: "Reset 3Scale Portal Endpoint in PROD gateway"
  shell: oc set env dc/apicast-production THREESCALE_PORTAL_ENDPOINT=http://redhat12@system-master:3000/master/api/proxy/configs -n amp
# The db update will have updated the randomly generated password, need to put it back to that store in the copied db
- name: "Reset 3Scale Portal Endpoint in Staging gateway"
  shell: oc set env dc/apicast-staging THREESCALE_PORTAL_ENDPOINT=http://redhat12@system-master:3000/master/api/proxy/configs -n amp

# Add my extra gateway api routes as I'm not using Wildcards
- name: Create AMP application routes from cloned repo
  shell: oc new-app  --file "{{clone_destination}}/3Scale/ansible/playbooks/roles/load_3Scale_settings/files/project.yaml" -n amp -p DOMAIN_NAME_SUFFIX="{{domain_name_suffix}}" KEYSTORE_PASSWORD={{keystore_password}}
  ignore_errors: yes

    # Pause to make sure that 3Scale has fully revoverd from redis caches backups being installed

    # A helpful reminder of what to look out for post-update.
- pause:
    prompt: "Has the Redis caches fully recovered?"

######## 3Scale physical setup complete ################################################
# Now, a number of API calls to 3Scale will be made to change the wildcard domain name #
########################################################################################

# members (api-key)

- name: update members (api-key) with new endpoints
  shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/5/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Fmembersregistrationservice-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Feap-app-membersapp.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Fmembersregistrationservice-3scale-apicast-staging.{{domain_name_suffix}}%3A443' -k

- name: Get latest members (api-key) sandbox version to promote
  uri:
    validate_certs: no
    method: GET
    body_format: raw
    headers:
        Content-Type: "application/xml"
    url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/5/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
  register: sandbox_membersapi_result

- name: Save the latest sandbox members (api-key) version
  set_fact:
    sandbox_membersapi_version: "{{sandbox_membersapi_result|json_query('json.proxy_config.version')}}"

# members (oauth)

- name: update members (oauth) with new endpoints
  shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/6/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Fmembersregistrationservice-oauth-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Feap-app-membersapp.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Fmembersregistrationservice-oauth-3scale-apicast-staging.apps.{{domain_name_suffix}}%3A443&oidc_issuer_endpoint=http%3A%2F%2F3scale-admin%3A4515e009-ee60-4039-8d5a-1578ecec4349%40sso-sso.{{domain_name_suffix}}%2Fauth%2Frealms%2F3scale' -k

- name: Get latest members (oauth) sandbox version to promote
  uri:
    validate_certs: no
    method: GET
    body_format: raw
    headers:
      Content-Type: "application/xml"
    url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/6/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
  register: sandbox_membersoauth_result

- name: Save the latest sandbox members (oauth) version
  set_fact:
    sandbox_membersoauth_version: "{{sandbox_membersoauth_result|json_query('json.proxy_config.version')}}"

# Promote the update gateways to production

- name: Promote members (api-key) to production gateway
  shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/5/proxy/configs/sandbox/{{sandbox_membersapi_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

- name: Promote members (oauth) to production gateway
  shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/6/proxy/configs/sandbox/{{sandbox_membersoauth_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

# fis agile int demolab

- name: update fis agile int demo with new endpoints
  shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/7/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Ffisdemo-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Ffisgateway-service-fisdemoprod.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Ffisdemo-3scale-apicast-staging.{{domain_name_suffix}}%3A443&oidc_issuer_endpoint=http%3A%2F%2F3scale-admin%3A4515e009-ee60-4039-8d5a-1578ecec4349%40sso-sso.{{domain_name_suffix}}%2Fauth%2Frealms%2F3scale' -k

- name: Get latest fis (api-key) sandbox version to promote
  uri:
    validate_certs: no
    method: GET
    body_format: raw
    headers:
      Content-Type: "application/xml"
    url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/7/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
  register: sandbox_fis_result

- name: Save the latest sandbox fis (api-key) version
  set_fact:
    sandbox_fis_version: "{{sandbox_fis_result|json_query('json.proxy_config.version')}}"

# fis agile int demolab (Oauth)

- name: update fis agile int demo (OAuth) with new endpoints
  shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/8/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Foauth-fisdemo-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Ffisgateway-service-fisdemoprod.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Foauth-fisdemo-3scale-apicast-staging.{{domain_name_suffix}}%3A443&oidc_issuer_endpoint=http%3A%2F%2F3scale-admin%3A4515e009-ee60-4039-8d5a-1578ecec4349%40sso-sso.{{domain_name_suffix}}%2Fauth%2Frealms%2F3scale' -k

- name: Get latest fis (OAuth) sandbox version to promote
  uri:
    validate_certs: no
    method: GET
    body_format: raw
    headers:
      Content-Type: "application/xml"
    url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/8/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
  register: sandbox_fis_oauth_result

- name: Save the latest sandbox fis (oauth) version
  set_fact:
    sandbox_fis_oauth_version: "{{sandbox_fis_oauth_result|json_query('json.proxy_config.version')}}"

# Promote the update gateways to production

- name: Promote fisdemo (api-key) to production gateway
  shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/7/proxy/configs/sandbox/{{sandbox_fis_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

- name: Promote fisdemo (oauth) to production gateway
  shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/8/proxy/configs/sandbox/{{sandbox_fis_oauth_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k