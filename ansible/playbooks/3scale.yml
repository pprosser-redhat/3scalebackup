---

# Documentation:
# This playbook is used to deploy 3Scale, and a restful service
#
# If you would like to test out Admin portal and/or developer portal SSO based access then you have to manually
# change the SSO URL in the 3Scale Admin console - you will see that it has apps.demolab.local as the domain suffix,
# changa this to wildcard domain of your Openshift Cluster - this is because there isn't a 3Scale API to automate this change.
# Do this once the playbook has completed.
#
- name:               Create 3Scale AMP and deploy members api
  hosts:              localhost
  connection:         local
  gather_facts: no

  vars_prompt:
    - name:           ocp_username
      prompt:         "Please provide Openshift Login username"
      default:        developer
      private:        no
    - name:           ocp_password
      prompt:         "Please provide your Openshift Login password"
      default:        developer
      private:        yes
    - name:           ocp_url
      prompt:         "Please provide your Openshift URL"
      default:        https://192.168.99.100:8443
      private:        no
    - name:           domain_name_suffix
      prompt:         "Please Enter the domain name wildcard suffix for all OCP routes"
      default:        apps.demolab.local
      private:        no
    - name:           keystore_password
      prompt:         "Please enter the default password for keystores"
      default:        whatever
    - name:           git_repo
      prompt:         "Please Enter the Git repo to clone to get hold of artefacts"
      default:        https://github.com/pprosser-redhat/3scalebackup.git
      private:        no
    - name:           clone_destination
      prompt:         "Please Enter the local destination to store the repo"
      default:        /tmp/3scaletmp
      private:        no
    - name:           amp_token
      prompt:         "Please Enter the 3SCale token that is required for 3Scale API calls. Defaults to a valid one in the DB"
      default:        c373d6c0262d307aaae51dc7a102f53ec32d8f642f88a97687c8dfabac15d838
      private:        no
    - name:           gogs_user
      prompt:         Gogs user name that you will create at registration
      default:        pprosser
      private:        no

#  vars:
#    DOMAIN_NAME_SUFFIX: apps.demolab.local
#    KEYSTORE_PASSWORD: test

  tasks:

    - name: Clone base git repo from "{{git_repo}}"
      git:
        repo: "{{git_repo}}"
        dest: "{{clone_destination}}/3Scale"
        version: master
        update: yes
        clone: yes
        force: yes
        version: 3Scale24


# Login to Openshift using oc client - I can't get the openshift_raw module to authenticate
    - name:           login to Openshift at the specified URL
      shell:          oc login {{ocp_url}} --username={{ocp_username}} --password={{ocp_password}}

#####################################################
# Start by deploying RH SSO - this is uses for oauth
# api authentication, and oauth login to admin/dev portals
#####################################################

    - name:           Create RH SSO project
      shell:          oc new-project sso --description='RH SSO' --display-name='RH SSO'

    - name: Create sso service account
      shell: oc create -f {{clone_destination}}/3Scale/sso_backup/ansible_definitions/sso-serviceaccounts.yml -n sso

    - name: Create secrets - jgroups
      shell: oc create -f {{clone_destination}}/3Scale/sso_backup/ansible_definitions/sso-secrets-jgroups.yml -n sso

    - name: Create secrets - https
      shell: oc create -f {{clone_destination}}/3Scale/sso_backup/ansible_definitions/sso-secrets-https.yml -n sso

    - name: Create sso pvc
      shell: oc create -f {{clone_destination}}/3Scale/sso_backup/ansible_definitions/sso-pvc.yml -n sso

    - name: Create SSO application from cloned repo
      shell: oc new-app  --file "{{clone_destination}}/3Scale/sso_backup/project.yaml" -n sso -p DOMAIN_NAME_SUFFIX="{{domain_name_suffix}}" -p KEYSTORE_PASSWORD="{{keystore_password}}"

    - name: Create SSO application from cloned repo
      shell: oc new-app  --file "{{clone_destination}}/3Scale/sso_backup/project.yaml" -n sso -p DOMAIN_NAME_SUFFIX="{{domain_name_suffix}}" -p KEYSTORE_PASSWORD="{{keystore_password}}"

# Wait for SSO to start before continuing
    - name: Is SSO started?
      uri:
        validate_certs: no
        url: https://secure-sso-sso.{{domain_name_suffix}}/auth/
      register: testsso
      until: testsso.status == 200
      retries: 200
      delay: 5

    - name: Get OCP bearer token for API call
      shell: oc whoami -t
      register: ocptoken_sso

    - name: Get SSO mysql Pod
      uri:
        validate_certs: no
        url: "{{ocp_url}}/api/v1/namespaces/sso/pods?labelSelector=deploymentConfig=sso-mysql"
        headers:
          Authorization: "Bearer {{ocptoken_sso.stdout}}"
      register: ssomysql_pod

    - name: Capture ssomysql pod name
      set_fact:
        ssomysql_container: "{{ssomysql_pod|json_query('json.items[0].metadata.name')}}"

    - name: "Inject sso mysql backup into container {{ssomysql_container}}"
      shell: oc rsync {{clone_destination}}/3Scale/3Scale_backup/sso/db_archive_dir {{ssomysql_container}}:/var/lib/mysql/data -n sso

    - name: "Loading data into mysql"
      shell: oc exec {{ssomysql_container}} -n sso -- bash -c "mysql -u root < /var/lib/mysql/data/db_archive_dir/all.sql"

#####################################################
# Create project to deploy 3Scale Management Platform
#####################################################
    - name:           Create 3Scale AMP project
      shell:          oc new-project amp --description='3Scale API Management Platform' --display-name='3Scale API Management Platform'

# Replace 192.168.99.100.nip.io with choosen wildcard domain_name_suffix

    - name: Replace Wildcard name in AMP SQL database before Loading
      replace:
        path: '{{clone_destination}}/3Scale/3Scale_backup/db_archive_dir/all.sql'
        regexp: 192.168.99.100.nip.io
        replace: '{{domain_name_suffix}}'

#####################################################
# Create all AMP from template
#####################################################

    - name: Create new 3Scale AMP from template
      shell: oc new-app -n amp --file /{{clone_destination}}/3Scale/amptemplates/amp.yml --param WILDCARD_DOMAIN={{domain_name_suffix}}

# Wait for 3Scale to start before continuing
    - name: Is 3Scale started?
      uri:
        validate_certs: no
        url: https://3scale-admin.{{domain_name_suffix}}/p/login
      register: test
      until: test.status == 200
      retries: 400
      delay: 5

# Capture pods names that need files injecting to recover 3SCale Correctly

    - name: Get OCP bearer token for API call
      shell: oc whoami -t
      register: ocptoken

    - name: Get mysql Pod
      uri:
        validate_certs: no
        url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=3scale.component-element=mysql"
        headers:
          Authorization: "Bearer {{ocptoken.stdout}}"
      register: mysql_pod

    - name: Capture mysql pod name
      set_fact:
        mysql_container: "{{mysql_pod|json_query('json.items[0].metadata.name')}}"

    - name: Get backend_redis pod
      uri:
        validate_certs: no
        url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=3scale.component=backend,3scale.component-element=redis"
        headers:
          Authorization: "Bearer {{ocptoken.stdout}}"
      register: backend_redis_pod

    - name: Capture backend_redis_pod pod name
      set_fact:
        backend_redis_container: "{{backend_redis_pod|json_query('json.items[0].metadata.name')}}"

    - name: Get system_redis pod
      uri:
        validate_certs: no
        url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=3scale.component=system,3scale.component-element=redis"
        headers:
          Authorization: "Bearer {{ocptoken.stdout}}"
      register: system_redis_pod

    - name: Capture backend_redis_pod pod name
      set_fact:
        system_redis_container: "{{system_redis_pod|json_query('json.items[0].metadata.name')}}"

# Copy the mysql backup file into the mysql container
    - name: "Inject mysql backup into container {{mysql_container}}"
      shell: oc rsync {{clone_destination}}/3Scale/3Scale_backup/db_archive_dir {{mysql_container}}:/var/lib/mysql/data -n amp

# execute
    - name: "Loading data into mysql"
      shell: oc exec {{mysql_container}} -n amp -- bash -c "mysql -u root < /var/lib/mysql/data/db_archive_dir/all.sql"

# load backend_redis cache

    - name: "Inject backend_redis cache backup into container appendonly.aof {{backend_redis_container}}"
      shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/backend_redis/data/appendonly.aof {{backend_redis_container}}:/var/lib/redis/data -n amp

    - name: "Inject backend_redis cache backup into container dump.rdb {{backend_redis_container}}"
      shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/backend_redis/data/dump.rdb {{backend_redis_container}}:/var/lib/redis/data -n amp

    - name: "restart backend_redis_container {{backend_redis_container}}"
      shell: oc delete pod {{backend_redis_container}} -n amp

# load system_redis cache

    - name: "Inject system_redis cache backup into container appendonly.aof {{system_redis_container}}"
      shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/system_redis/data/appendonly.aof {{system_redis_container}}:/var/lib/redis/data -n amp

    - name: "Inject system_redis cache backup into container dump.rdb {{system_redis_container}}"
      shell: oc cp {{clone_destination}}/3Scale/3Scale_backup/system_redis/data/dump.rdb {{system_redis_container}}:/var/lib/redis/data -n amp

    - name: "restart backend_redis_container {{system_redis_container}}"
      shell: oc delete pod {{system_redis_container}} -n amp

# load backup of zync database 

    - name: Get Zync Database Pod
      uri:
        validate_certs: no
        url: "{{ocp_url}}/api/v1/namespaces/amp/pods?labelSelector=3scale.component-element=database"
        headers:
          Authorization: "Bearer {{ocptoken.stdout}}"
      register: zync_pod

    - name: Capture zync database pod name
      set_fact:
        zync_db_container: "{{zync_pod|json_query('json.items[0].metadata.name')}}"

# Copy the zync db backup file into the zync db container container
    - name: "Inject zync backup into container {{zync_db_container}}"
      shell: oc rsync {{clone_destination}}/3Scale/3Scale_backup/backup_zync_db/data {{zync_db_container}}:/var/lib/pgsql/data/backup -n amp

# Restore the database
    - name: "Loading data into zync database"
      shell: oc exec {{zync_db_container}} -n amp -- bash -c "psql -h 127.0.0.1 -U zync -d zync_production < /var/lib/pgsql/data/backup/data/zync.sql"
      
# The db update will have updated the randomly generated password, need to put it back to that store in the copied db
    - name: "Reset 3Scale Portal Endpoint in PROD gateway"
      shell: oc set env dc/apicast-production THREESCALE_PORTAL_ENDPOINT=http://redhat12@system-master:3000/master/api/proxy/configs -n amp
# The db update will have updated the randomly generated password, need to put it back to that store in the copied db
    - name: "Reset 3Scale Portal Endpoint in Staging gateway"
      shell: oc set env dc/apicast-staging THREESCALE_PORTAL_ENDPOINT=http://redhat12@system-master:3000/master/api/proxy/configs -n amp

# Add my extra gateway api routes as I'm not using Wildcards
    - name: Create AMP application routes from cloned repo
      shell: oc new-app  --file "{{clone_destination}}/3Scale/backup_amp/project.yaml" -n amp -p DOMAIN_NAME_SUFFIX="{{domain_name_suffix}}" KEYSTORE_PASSWORD={{keystore_password}}


    # Pause to make sure that 3Scale has fully revoverd from redis caches backups being installed

    # A helpful reminder of what to look out for post-update.
    - pause:
        prompt: "Has the Redis caches fully recovered?"

######## 3Scale physical setup complete ################################################
# Now, a number of API calls to 3Scale will be made to change the wildcard domain name #
########################################################################################

# members (api-key)

    - name: update members (api-key) with new endpoints
      shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/5/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Fmembersregistrationservice-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Feap-app-membersapp.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Fmembersregistrationservice-3scale-apicast-staging.{{domain_name_suffix}}%3A443' -k

    - name: Get latest members (api-key) sandbox version to promote
      uri:
        validate_certs: no
        method: GET
        body_format: raw
        headers:
          Content-Type: "application/xml"
        url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/5/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
      register: sandbox_membersapi_result

    - name: Save the latest sandbox members (api-key) version
      set_fact:
        sandbox_membersapi_version: "{{sandbox_membersapi_result|json_query('json.proxy_config.version')}}"

# members (oauth)

    - name: update members (oauth) with new endpoints
      shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/6/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Fmembersregistrationservice-oauth-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Feap-app-membersapp.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Fmembersregistrationservice-oauth-3scale-apicast-staging.apps.{{domain_name_suffix}}%3A443&oidc_issuer_endpoint=http%3A%2F%2F3scale-admin%3A4515e009-ee60-4039-8d5a-1578ecec4349%40sso-sso.{{domain_name_suffix}}%2Fauth%2Frealms%2F3scale' -k

    - name: Get latest members (oauth) sandbox version to promote
      uri:
        validate_certs: no
        method: GET
        body_format: raw
        headers:
          Content-Type: "application/xml"
        url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/6/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
      register: sandbox_membersoauth_result

    - name: Save the latest sandbox members (oauth) version
      set_fact:
        sandbox_membersoauth_version: "{{sandbox_membersoauth_result|json_query('json.proxy_config.version')}}"

# Promote the update gateways to production

    - name: Promote members (api-key) to production gateway
      shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/5/proxy/configs/sandbox/{{sandbox_membersapi_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

    - name: Promote members (oauth) to production gateway
      shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/6/proxy/configs/sandbox/{{sandbox_membersoauth_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

# fis agile int demolab

    - name: update fis agile int demo with new endpoints
      shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/7/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Ffisdemo-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Ffisgateway-service-fisdemoprod.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Ffisdemo-3scale-apicast-staging.{{domain_name_suffix}}%3A443&oidc_issuer_endpoint=http%3A%2F%2F3scale-admin%3A4515e009-ee60-4039-8d5a-1578ecec4349%40sso-sso.{{domain_name_suffix}}%2Fauth%2Frealms%2F3scale' -k

    - name: Get latest fis (api-key) sandbox version to promote
      uri:
        validate_certs: no
        method: GET
        body_format: raw
        headers:
          Content-Type: "application/xml"
        url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/7/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
      register: sandbox_fis_result

    - name: Save the latest sandbox fis (api-key) version
      set_fact:
        sandbox_fis_version: "{{sandbox_fis_result|json_query('json.proxy_config.version')}}"

# fis agile int demolab (Oauth)

    - name: update fis agile int demo (OAuth) with new endpoints
      shell: curl -v  -X PATCH "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/8/proxy.xml" -d 'access_token={{amp_token}}&endpoint=https%3A%2F%2Foauth-fisdemo-3scale-apicast-production.{{domain_name_suffix}}%3A443&api_backend=http%3A%2F%2Ffisgateway-service-fisdemoprod.{{domain_name_suffix}}%3A80&sandbox_endpoint=https%3A%2F%2Foauth-fisdemo-3scale-apicast-staging.{{domain_name_suffix}}%3A443&oidc_issuer_endpoint=http%3A%2F%2F3scale-admin%3A4515e009-ee60-4039-8d5a-1578ecec4349%40sso-sso.{{domain_name_suffix}}%2Fauth%2Frealms%2F3scale' -k

    - name: Get latest fis (OAuth) sandbox version to promote
      uri:
        validate_certs: no
        method: GET
        body_format: raw
        headers:
          Content-Type: "application/xml"
        url: "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/8/proxy/configs/sandbox/latest.json?access_token={{amp_token}}"
      register: sandbox_fis_oauth_result

    - name: Save the latest sandbox fis (oauth) version
      set_fact:
        sandbox_fis_oauth_version: "{{sandbox_fis_oauth_result|json_query('json.proxy_config.version')}}"

# Promote the update gateways to production

    - name: Promote fisdemo (api-key) to production gateway
      shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/7/proxy/configs/sandbox/{{sandbox_fis_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

    - name: Promote fisdemo (oauth) to production gateway
      shell: curl -v  -X POST "https://3scale-admin.{{domain_name_suffix}}/admin/api/services/8/proxy/configs/sandbox/{{sandbox_fis_oauth_version}}/promote.json" -d 'access_token={{amp_token}}&to=production' -k

# Setup up demo Services

###################################################
# Create shared services gogs and nexus
#####################################################

# Create gogs repo

    - name:           Create Shared Services Project
      shell:          oc new-project sharedservices --description='Shared Services Project' --display-name='Shared Services Project'
#
    - name: Create members application from cloned repo
      shell: oc new-app  -f http://bit.ly/openshift-gogs-persistent-template -n sharedservices --param=HOSTNAME=gogs-persistent.{{domain_name_suffix}}

# Create Persistent Nexus Repository
    - name: Download nexus template
      shell: oc create -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-persistent-template.yaml -n sharedservices
    - name: Create Nexus Repository
      shell: oc new-app nexus3-persistent -n sharedservices

    # Go and create a user in gogs before continuing and clone repo = not found away quick way of automating yet
    - pause:
        prompt: "Manually provision a user in Gogs, and clone repo from https://github.com/pprosser-redhat/fuse-financial-cicd.git and call the new repo fuse-financial-cicd"

##################################################
# Create the members service api to use as part of the
# 3Scale demo
#####################################################

    - name:           Create members api project
      shell:          oc new-project membersapp --description='Members Service for 3Scale Demo' --display-name='Members Service for 3Scale Demo'

    - name: Create service account - eap
      shell: oc create -f {{clone_destination}}/3Scale/members_backup/ansible_definitions/eap-serviceaccount.yml -n membersapp

    - name: Create service account - eap7
      shell: oc create -f {{clone_destination}}/3Scale/members_backup/ansible_definitions/eap7-serviceaccount.yml -n membersapp

    - name: Create secrets - eap service account
      shell: oc create -f {{clone_destination}}/3Scale/members_backup/ansible_definitions/members-secret-eap-serviceaccount.yml -n membersapp

    - name: Create secrets - eap7 service account
      shell: oc create -f {{clone_destination}}/3Scale/members_backup/ansible_definitions/members-secret-eap7-serviceaccount.yml -n membersapp
#
#    - name: Create members rolebindings
#      openshift_raw:
#        host:           "{{ocp_url}}"
##        username:       "{{ocp_username}}"
#        password:       "{{ocp_password}}"
#        definition: "{{ lookup('file', '{{clone_destination}}/members_backup/ansible_definitions/rolebindings.yml') | from_yaml }}"
#        state: present

    - name: Create members application from cloned repo
      shell: oc new-app  --file "{{clone_destination}}/3Scale/members_backup/project.yaml" -n membersapp -p DOMAIN_NAME_SUFFIX="{{domain_name_suffix}}" -p MAVEN_MIRROR_URL="http://nexus-sharedservices.{{domain_name_suffix}}/repository/maven-all-public"

###################################################
# Create the fis demo project and application
#####################################################
#    - name: Create fisdemo
#      shell: oc new-project fisdemo --description='Development and UAT environment for Agile Integration Banking Demo - Power by Red Hat Fuse' --display-name='Fuse Banking Demo - Dev and UAT'

#    - name: Create fisdemo apicast secrets
#      shell: oc create -f {{clone_destination}}/3Scale/FuseBankingDevAndUat/ansible_definitions/secret-apicast.yaml -n fisdemo

#    - name: Create fisdemo mysql secrets
#      shell: oc create -f {{clone_destination}}/3Scale/FuseBankingDevAndUat/ansible_definitions/secret-mysql.yaml -n fisdemo

#    - name: Create fisdemo app
#      shell: oc new-app --file {{clone_destination}}/3Scale/FuseBankingDevAndUat/project.yaml -n fisdemo -p MAVEN_MIRROR_URL=http://nexus-sharedservices.{{domain_name_suffix}}/repository/maven-all-public -p DOMAIN_NAME_SUFFIX={{domain_name_suffix}}

###################################################
# Create the fis demo prod project and application
#####################################################

#    - name: Create fisdemoprod
#      shell: oc new-project fisdemoprod --description='Prod environment for Agile Integration Banking Demo - Power by Red Hat Fuse' --display-name='Fuse Banking Demo - PROD'

#    - name: Create fisdemoprod apicast secret
#      shell: oc create -f {{clone_destination}}/3Scale/FuseBankingProd/ansible_definitions/secret-apicast.yaml -n fisdemoprod

#    - name: Create fisdemoprod mysql secrets
#      shell: oc create -f {{clone_destination}}/3Scale/FuseBankingProd/ansible_definitions/secret-mysql.yaml -n fisdemoprod

#    - name: Create fisdemoprod app
#      shell: oc new-app --file {{clone_destination}}/3Scale/FuseBankingProd/project.yaml -n fisdemoprod -p MAVEN_MIRROR_URL=http://nexus-sharedservices.{{domain_name_suffix}}//repository/maven-all-public -p DOMAIN_NAME_SUFFIX={{domain_name_suffix}}

#    - name: Create Fuse Console for fisdemoprod
#      shell: oc new-app -n fisdemoprod -f https://raw.githubusercontent.com/jboss-fuse/application-templates/application-templates-2.1.fuse-000081-redhat-4/fis-console-namespace-template.json
###################################################
# Create the fis demo pieline project and application
#####################################################

#    - name: Create fisdemocicd
#      shell: oc new-project fisdemocicd --description='Fuse Banking Pipeline' --display-name='Fuse Banking Pipeline'

#    - name: Create Pipelines and Jenkins
#      shell: oc new-app --file {{clone_destination}}/3Scale/FuseBankingPipeline/project.yaml -n fisdemocicd -p DOMAIN_NAME_SUFFIX={{domain_name_suffix}}

#    - name: Create Pipelines and Jenkins
#      shell: oc adm policy add-role-to-user edit system:serviceaccount:fisdemocicd:jenkins -n fisdemo

#    - name: Create Pipelines and Jenkins
#      shell: oc adm policy add-role-to-user system:image-puller system:serviceaccount:fisdemoprod:jenkins -n fisdemo

#    - name: Create Pipelines and Jenkins
#      shell: oc adm policy add-role-to-user edit system:serviceaccount:fisdemocicd:jenkins -n fisdemoprod

###################################################
# Create the SaaS API Gateways
#####################################################

#    - name: Create apicast
#      shell: oc new-project apicast --description='3Scale APIcast Gateway' --display-name='3Scale APIcast Gateway'

#    - name: Create apicast secrets
#      shell: oc create -f {{clone_destination}}/3Scale/3ScaleGateway/ansible_definitions/secret-apicast.yml -n apicast

#    - name: Create apicst gateway
#      shell: oc new-app --file {{clone_destination}}/3Scale/3ScaleGateway/project.yaml -n apicast  -p DOMAIN_NAME_SUFFIX={{domain_name_suffix}}


###################################################
# Create the fis demo GUI project and application
#####################################################

#    - name: Clone fisdemo  git repo from "http://gogs-persistent.{{domain_name_suffix}}"
#      git:
#        repo: "http://gogs-persistent.{{domain_name_suffix}}/{{gogs_user}}/fuse-financial-cicd.git"
#        dest: "{{clone_destination}}/fisdemo"
#        update: yes
#        clone: yes

#    - name: Create fisdemogui
#      shell: oc new-project fisdemogui --description='Fuse Banking Demo - GUI' --display-name='Fuse Banking Demo - GUI'

#    - name: Create fisdemogui build
#      shell: oc new-build --image-stream=nodejs --binary=true --name=fisdemogui -n fisdemogui

#    - name: Create GUI node.js app
#      shell: oc start-build fisdemogui --from-dir={{clone_destination}}/fisdemo/fisdemogui -n fisdemogui

#    - name: Create new gui apps
#      shell: oc new-app fisdemogui -n fisdemogui --allow-missing-imagestream-tags

#    - name: Expose gui app as routes
#      shell: oc expose svc fisdemogui -n fisdemogui


# Logout of Openshift
    - name:           logout of Openshift
      shell:          oc logout

    - name: Remove git folder (cleanup)
      file:
        path: "{{clone_destination}}"
        state: absent
